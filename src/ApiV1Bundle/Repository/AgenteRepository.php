<?php
namespace ApiV1Bundle\Repository;
use ApiV1Bundle\Entity\User;
use ApiV1Bundle\Entity\Ventanilla;

/**
 * AgenteRepository
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AgenteRepository extends ApiRepository
{

    /**
     * Obtiene un repositorio
     *
     * @return \Doctrine\ORM\EntityRepository
     */
    private function getRepository()
    {
        return $this->getEntityManager()->getRepository('ApiV1Bundle:Agente');
    }

    /**
     * Encontrar todos los agentes y delvolver el resultado paginado
     *
     * @param integer $puntoAtencionId Identificador de punto de atención
     * @param integer $offset Cantidad de registros a saltar
     * @param integer $limit Cantidad máxima de registros a retornar
     * @return array
     */
    public function findAllPaginate($puntoAtencionId, $offset, $limit,$params = [])
    {
        $query = $this->getRepository()->createQueryBuilder('a');
        $query->select([
            'u.id',
            'a.id as agente_id',
            'a.nombre',
            'a.apellido',
            'IDENTITY(a.ventanillaActual) as ventanillaActual',
            'v.identificador as ventanillaActualIdentificador'
        ]);

        $query->join('a.user', 'u');
        $query->leftJoin('a.ventanillaActual', 'v');
        $query->where('a.puntoAtencion = :puntoAtencionId')->setParameter('puntoAtencionId', $puntoAtencionId);
        
        $nombre = isset($params['nombre'])?trim($params['nombre']):null;
        $rol = isset($params['rol'])?trim($params['rol']):null;
        if($rol  && $rol >0 &&  $rol  != User::ROL_AGENTE){
            return [];
        }
        if ($nombre != "") {
             $query->andWhere('a.nombre LIKE :nombre '
                     . ' OR a.apellido LIKE :nombre '
                     . ' OR CONCAT(a.nombre,\' \',a.apellido) LIKE :nombre '
                     . ' OR ( p.nombre LIKE :nombre ) ' )->setParameter('nombre',  '%'.$nombre.'%');
        }
        
        $query->setFirstResult($offset);
        $query->setMaxResults($limit);
        $query->orderBy('a.id', 'ASC');
        return $query->getQuery()->getResult();
    }

    /**
     * Devuelve el total de agentes de un punto de atención
     *
     * @param integer $puntoAtencionId Identificador único de punto de atención
     * @return integer
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getTotal($puntoAtencionId, $params=[])
    {
        $query = $this->getRepository()->createQueryBuilder('a');
        $query->select('count(a.id)');
        $query->join('a.user', 'u');
        $query->where('a.puntoAtencion = :puntoAtencionId');
        $query->andWhere('u.rol = :rol')->setParameter('rol', User::ROL_AGENTE);
        $nombre = isset($params['nombre'])?trim($params['nombre']):null;
        $rol = isset($params['rol'])?trim($params['rol']):null;
        if($rol  && $rol >0  && $rol != User::ROL_AGENTE){
            return 0;
        }
        if ($nombre != "") {
             $query->andWhere('a.nombre LIKE :nombre '
                     . ' OR a.apellido LIKE :nombre '
                     . ' OR CONCAT(a.nombre,\' \',a.apellido) LIKE :nombre '
                     . ' OR ( p.nombre LIKE :nombre ) ' )->setParameter('nombre',  '%'.$nombre.'%');
        }
        if($puntoAtencionId){
            $query->setParameter('puntoAtencionId', $puntoAtencionId);
        }
        
        $total = $query->getQuery()->getSingleScalarResult();
        return (int) $total;
    }

    /**
     * Cantidad de agentes de una ventanilla
     *
     * @param integer $ventanillaId Identificador de ventanilla
     * @return integer
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getCantidadDeAgentesAsociadosAVentanilla($ventanillaId)
    {
        $query = $this->getRepository()->createQueryBuilder('a');
        $query->select('count(a.id)');
        $query->where('a.ventanillaActual = :ventanillaId');
        $query->setParameter('ventanillaId', $ventanillaId);
        $total = $query->getQuery()->getSingleScalarResult();
        return (int) $total;
    }

    /**
     * @param Ventanilla $ventanilla
     * @return array
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAgenteVentanilla(Ventanilla $ventanilla) {
        $query = $this->getRepository()->createQueryBuilder('a');
        $query->where('a.ventanillaActual = :ventanillaId');
        $query->setParameter('ventanillaId', $ventanilla->getId());
        return $query->getQuery()->getSingleResult();
    }

    /**
     * Listado de ventanillas por agente que no esten ocupadas por otros agentes
     *
     * @param integer $agenteId Identificador de agente
     * @return array
     */
    public function findVentanillasAgente($agenteId)
    {
        $query = $this->getRepository()->createQueryBuilder('u');
        $query->select(['v.id', 'v.identificador']);
        $query->join('u.ventanillas', 'v');
        $query->where('u.id = :id')->setParameter('id', $agenteId);
        return  $query->getQuery()->getResult();
    }

    /**
     * Devuelve todos los agentes del punto o puntos de atención
     * @param object $puntosAtencion Punto de atención
     * @return array
     */
    public function findAllByPuntoAtencion($puntosAtencion,$params = [])
    {
        $query = $this->getRepository()->createQueryBuilder('a');
        $query->select([
            'u.id',
            'u.username as usuario',
            'a.nombre',
            'a.apellido',
            'u.rol',
            'p.id as pda_id',
            'p.puntoAtencionIdSnt as pda_id_snt',
            'p.nombre as pda'
        ]);
        $query->join('a.user', 'u');
        $query->join('a.puntoAtencion', 'p');
        $query->where('p.puntoAtencionIdSnt IN (:puntosAtencion)')->setParameter('puntosAtencion', $puntosAtencion);
        $query->andWhere('u.rol = :rol')->setParameter('rol', User::ROL_AGENTE);
        $nombre = isset($params['nombre'])?trim($params['nombre']):null;
        $rol = isset($params['rol'])?trim($params['rol']):null;
        if($rol  && $rol >0 &&  $rol  != User::ROL_AGENTE){
            return [];
        }
        if ($nombre != "") {
             $query->andWhere('a.nombre LIKE :nombre '
                     . ' OR a.apellido LIKE :nombre '
                     . ' OR CONCAT(a.nombre,\' \',a.apellido) LIKE :nombre '
                     . ' OR ( p.nombre LIKE :nombre ) ' )->setParameter('nombre',  '%'.$nombre.'%');
        }
        $query->orderBy('a.id', 'ASC');
        return $query->getQuery()->getResult();
    }
}